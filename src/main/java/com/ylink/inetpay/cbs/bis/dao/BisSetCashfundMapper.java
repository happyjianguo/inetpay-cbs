package com.ylink.inetpay.cbs.bis.dao;

import java.util.List;

import org.apache.ibatis.annotations.Param;
import org.ylinkpay.framework.mybatis.annotation.MybatisMapper;

import com.ylink.inetpay.common.core.constant.BISAuditStatus;
import com.ylink.inetpay.common.core.constant.EPocessStatusEnum;
import com.ylink.inetpay.common.core.constant.EffectiveStatusEnum;
import com.ylink.inetpay.common.project.cbs.dto.bis.BisSetCashfund;
@MybatisMapper("bisSetCashfundMapper")
public interface BisSetCashfundMapper {
	/**
	 * This method was generated by MyBatis Generator. This method corresponds
	 * to the database table TB_BIS_SET_CASHFUND
	 *
	 * @mbggenerated Sun Nov 20 15:16:32 CST 2016
	 */
	int insert(BisSetCashfund record);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds
	 * to the database table TB_BIS_SET_CASHFUND
	 *
	 * @mbggenerated Sun Nov 20 15:16:32 CST 2016
	 */
	int insertSelective(BisSetCashfund record);

	/**
	 * 查询所有的保证金设置记录
	 * 
	 * @param queryParam
	 * @return
	 */
	List<BisSetCashfund> findListPage(BisSetCashfund queryParam);

	/**
	 * 根据id查询设置安保问题详情
	 * 
	 * @param id
	 * @return
	 */
	BisSetCashfund findBeanDto(String id);

	/**
	 * 判断是否存在待审核的记录
	 * 
	 * @param balanceAccountId
	 * @param cashfundAccountId
	 * @param waitAudit
	 * @return
	 */
	List<BisSetCashfund> isWaitAudit(@Param("cashfundAccountIds") List<String> cashfundAccountIds, @Param("waitAudit") BISAuditStatus waitAudit);

	/**
	 * 修改保证金设置记录
	 * 
	 * @param bisSetCashfund
	 */
	void updateSetCashFund(BisSetCashfund bisSetCashfund);

	/**
	 * 查询所有审核已通过，生效状态为待审核，生效日期小于或等于当前账务日期
	 * 
	 * @param accountDate
	 * @param auditPass
	 * @return
	 */
	List<BisSetCashfund> findListAuditPass(@Param("accountDate") String accountDate,
			@Param("auditPass") BISAuditStatus auditPass,
			@Param("effectiveStatus") EffectiveStatusEnum effectiveStatus);
	/**
	 * 获取审核记录数
	 * @param ids
	 * @param auditPass
	 * @param waitEffect
	 * @return
	 */
	long getAuditNum(@Param("ids")List<String> ids, @Param("auditPass")BISAuditStatus auditPass, @Param("waitEffect")EffectiveStatusEnum waitEffect);
	/**
	 * 根据ids查询保证金设置记录
	 * @param ids
	 * @return
	 */
	List<BisSetCashfund> findListByIds(@Param("ids")List<String> ids);
	/**
	 * 根据accountIds,终止所有审核通过，未完成的记录
	 * @param ids
	 * @param stop
	 * @param auditPass
	 * @param waitComplate
	 * @return
	 */
	long stopSetCashFund(@Param("accountIds")List<String> accountIds, @Param("stop")EPocessStatusEnum stop, @Param("auditPass")BISAuditStatus auditPass,
			@Param("waitComplate")EPocessStatusEnum waitComplate);
	/**
	 * 获取小于当前账务日期，审核通过，未完成的数据
	 * @param accountDate
	 * @param auditPass
	 * @param waitComplate
	 * @return
	 */
	List<BisSetCashfund> findListAuditPass(@Param("accountDate")String accountDate, @Param("auditPass")BISAuditStatus auditPass,
			@Param("waitComplate")EPocessStatusEnum waitComplate);
	/**
	 * 批量保存保证金设置明细
	 * @param batchDtos
	 * @return
	 */
	long batchCashFundExp(@Param("batchDtos")List<BisSetCashfund> batchDtos);
	/**
	 * 根据批次号修改批次明细复核状态
	 * @param batchNo
	 * @param auditStatus
	 * @return
	 */
	long updateAuditStatusByBatchNo(@Param("batchNo")String batchNo, @Param("auditStatus")BISAuditStatus auditStatus);
	/**
	 * 根据批次号获取保证金list
	 * @param batchNo
	 * @return
	 */
	List<BisSetCashfund> findCashFundListByBatchNo(String batchNo);
}